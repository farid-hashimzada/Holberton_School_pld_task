from flask import Flask, request, jsonify
from models import db, User, UserRole, Organization
from flask_cors import CORS

app = Flask(__name__)
cors = CORS(app, resources={r"/api/*": {"origins": "*"}})

SECRET_KEY = "secret"
app.config["SQLALCHEMY_DATABASE_URI"] = "postgresql://postgres:postgres@localhost:5432/admindash"
app.config["SECRET_KEY"] = SECRET_KEY

db.init_app(app)
with app.app_context():
    db.create_all()

@app.route("/login", methods=["POST"])
def login():
    data = request.json
    email = data.get("email")
    password = data.get("password")
    user = User.query.filter_by(email=email, password=password).first()
    if user:
        user.generate_token()
        return jsonify({"token": user.token, "role": user.role.name})
    else:
        return jsonify({"error": "Invalid credentials"}), 401

@app.route("/admin", methods=["GET", "POST"])
def admin():
    if request.method == "GET":
        admins = User.query.filter_by(role=UserRole.ADMIN).all()
        return jsonify(
            [
                {
                    "name": a.name,
                    "surname": a.surname,
                    "email": a.email,
                    "role": UserRole.ADMIN.name,
                }
                for a in admins
            ]
        )
    elif request.method == "POST":
        data = request.json
        admin = User(
            name=data["name"],
            surname=data["surname"],
            email=data["email"],
            password=data["password"],
            role=UserRole.ADMIN,
        )
        db.session.add(admin)
        db.session.commit()
        return jsonify(
            {
                "message": "Admin created successfully",
                "data": {
                    "name": admin.name,
                    "surname": admin.surname,
                    "email": admin.email,
                    "role": UserRole.ADMIN.name,
                },
            }
        )

@app.route("/user", methods=["GET", "POST"])
def user():
    if request.method == "POST":
        data = request.json
        new_user = User(
            name=data["name"],
            surname=data["surname"],
            email=data["email"],
            password=data["password"],
            role=UserRole.USER,
        )
        db.session.add(new_user)
        db.session.commit()
        return jsonify(
            {
                "message": "User created successfully",
                "data": {
                    "name": new_user.name,
                    "surname": new_user.surname,
                    "email": new_user.email,
                    "role": UserRole.USER.name,
                },
            }
        )

@app.route("/organization", methods=["GET", "POST"])
def organization():
    if request.method == "GET":
        organizations = Organization.query.all()
        return jsonify(
            [
                {
                    "name": o.user.name,
                    "surname": o.user.surname,
                    "email": o.user.email,
                    "role": o.user.role.name,
                    "organization_name": o.organization_name,
                    "organization_address": o.organization_address,
                    "token": o.user.token,
                }
                for o in organizations
            ]
        )
    elif request.method == "POST":
        data = request.json
        new_user = User(
            name=data["name"],
            surname=data["surname"],
            email=data["email"],
            password=data["password"],
            role=UserRole.COMPANY,
        )
        new_organization = Organization(
            organization_name=data["organization_name"],
            organization_address=data["organization_address"],
            user=new_user,
        )
        db.session.add(new_organization)
        db.session.commit()
        return jsonify(
            {
                "message": "Organization created successfully",
                "data": {
                    "id": new_organization.id,
                    "name": new_user.name,
                    "surname": new_user.surname,
                    "email": new_user.email,
                    "role": UserRole.COMPANY.name,
                    "organization_name": new_organization.organization_name,
                    "organization_address": new_organization.organization_address,
                },
            }
        )

@app.route("/approve/<organization_id>", methods=["POST"])
def approve(organization_id):
    request_data = request.json
    organization = Organization.query.get(organization_id)
    if organization is None:
        return jsonify({"error": "Organization not found"}), 404
    elif organization.is_active:
        return jsonify({"error": "Organization already approved"}), 400
    if request_data.get("approve") == False:
        return jsonify({"error": "Request blocked"}), 400
    organization.is_active = True
    db.session.commit()
    return jsonify(
        {
            "message": "Organization approved successfully",
            "data": {
                "name": organization.user.name,
                "surname": organization.user.surname,
                "email": organization.user.email,
                "role": organization.user.role.name,
                "organization_name": organization.organization_name,
                "organization_address": organization.organization_address,
                "is_active": organization.is_active,
            },
        }
    )

@app.route("/approve-waiting", methods=["GET"])
def approve_waiting():
    organizations = Organization.query.filter_by(is_active=False).all()
    return jsonify(
        [
            {
                "name": o.user.name,
                "surname": o.user.surname,
                "email": o.user.email,
                "role": o.user.role.name,
                "organization_name": o.organization_name,
                "organization_address": o.organization_address,
                "is_active": o.is_active,
            }
            for o in organizations
        ]
    )

if __name__ == "__main__":
    app.run(debug=True)
